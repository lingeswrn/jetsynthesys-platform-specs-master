
# REVIEW:
#   - jsonapi.org
#

swagger: "2.0"
info:
    version: 0.1.3
    title: JetSynthesys Icon E-Commerce API
host: 0.0.0.0 # TBA
basePath: /
schemes:
    - http
    - https
consumes:
    - application/json
produces:
    - application/json

# -----------------------------
#   API Models
# --------------------------

definitions:

    # NOTE: Very much work in progress. Very rough draft, will need to discuss model data attributes on a deeper level.

    # -----------------------------
    #   User - OR Customer?
    # --------------------------

    # QUESTION: How is Customer vs User/Account modelled in Icon?
    # QUESTION: How is Address modelled in Icon?
    # QUESTION: What do we need to save for a user to be accessible client side, i.e. account settings?

    User:
        description: |
            A store user/customer.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["User"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime
            last_logged_in_at:
                type: dateTime
            email:
                type: string
                format: email
            phone:
                type: string
            first_name:
                type: string
            last_name:
                type: string
            settings:
                type: Setting
                examples:
                    - {"country": "IN"}
            addresses:
                type: array
                minItems: 1
                items:
                    type: Address


    # -----------------------------
    #   Address
    # --------------------------

    Address:
        description: |
            An address.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Address"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
            street:
                type: string
            street_2:
                type: string
            city:
                type: string
            postal_code:
                type: string
            state:
                type: string
            country:
                type: string


    # -----------------------------
    #   Country
    # --------------------------

    Country:
        description: |
            A country.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Address"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
                examples:
                    - "United States"
            code:
                type: string
                examples:
                    - "US"
            currency:
                type: string
                examples:
                    - "USD"

    # -----------------------------
    #   Setting
    # --------------------------

    Setting:
        description: |
            A setting.
        type: object

    # -----------------------------
    #   Store
    # --------------------------

    Store:
        description: |
            A store.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Store"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
                examples:
                    - "Studio Rudraksh"
            settings:
                type: Setting
                examples:
                    - {"bow": "wow"}
            countries:
                type: array
                minItems: 0
                items:
                    type: Country
                examples:
                    - See `Country`

            # REVIEW/DISCUSS:

            # name:
            #     type: string

            # url:
            #     type: string
            #     format: url

            # email:
            #     type: string
            #     format: email


    # -----------------------------
    #   Cart
    # --------------------------

    Cart:
        description: |
            A (shopping) cart.
        type: object
        required:
            - type
            - id
            - items
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Cart"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            total:
                type: number
            currency:
                type: string
            items:
                type: array
                minItems: 0
                items:
                    type: Item

            # REVIEW/DISCUSS:

            # NOT SURE: hold selected preferences in cart session to avoid refill, or do that client side?

            shipping_address:
                type: Address
            billing_address:
                type: Address
            coupon:
                type: string

            # NOT SURE: data types

            shipping_method:
                type: string # shipping method formats in Studio R?
            payment_method:
                type: string # payment method formats in Studio R?


    # -----------------------------
    #   Order
    # --------------------------

    Order:
        description: |
            A (customer) order.
        type: object
        required:
            - type
            - id
            - items
            - shipping_address
            - billing_address
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Order"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            items:
                type: array
                minItems: 0
                items:
                    type: Item
            shipping_address:
                type: Address
            billing_address:
                type: Address
            coupon:
                type: string
            email:
                type: string
                format: email
            phone:
                type: string
            total:
                type: number
            currency:
                type: string

            # REVIEW/DISCUSS:

            shipping_method:
                type: string # shipping method formats in Studio R?
            payment_method:
                type: string # payment method formats in Studio R?


    # -----------------------------
    #   Subscription
    # --------------------------

    # TODO


    # -----------------------------
    #   Item
    # --------------------------

    Item:
        type: object
        required:
            - type
            - id
            - product
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Item"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            product:
                type: Product
            quantity:
                type: number


    # -----------------------------
    #   Wishlist
    # --------------------------

    Wishlist:
        description: |
            A product wishlist - by a user/customer.
        type: object
        required:
            - type
            - id
            - name
            - customer
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Wishlist"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
            customer:
                type: Customer
            products:
                type: array
                minItems: 0
                items:
                    type: Item


    # -----------------------------
    #   Pin
    # --------------------------

    Pin:
        description: |
            A product/content pin/bookmark/favorite/like - by a user/customer.
        type: object
        required:
            - type
            - id
            - content
            - customer
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Pin"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            content:
                enum: [Product, Post, Media] # not sure if valid syntax
            customer:
                type: Customer


    # -----------------------------
    #   Product
    # --------------------------

    Product:
        description: |
            A product.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Product"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            key:
                type: string
                description: URL friendly product URI/identifier
                examples:
                    - "orange-dress-123"
            sku:
                type: string
                examples:
                    - "jr-orange-123"
            brand:
                type: Brand
            name:
                type: string
                examples:
                    - "Orange Bouquet Kurta-Pants Set"
            description:
                type: string
                examples:
                    - "Orange Bouquet is inspired by the beautiful season of spring, when flowers are in full bloom."
            price:
                type: number
                examples:
                    - 10000
            sale_price:
                type: number
                examples:
                    - 10000

            tax_class:
                type: string
                examples:
                    - "class1"
                # enum: []

            # QUESTION/REVIEW/DISCUSS:

            # how is this modeled now? use tags?
            zones:
                description: Item availability zones.
                type: "string"
                # enum: ["india", "world"]
                # type: array
                # items:
                #   type: Zone

            # array vs object?
            meta:
                description: Item meta tags for SEO optimization.
                type: array
                items:
                    type: Meta

            # how is this modeled now?
            weight:
                description: Item weight in ISO unit (kg)
                type: number
                examples:
                    - 1.05

            # how is this modeled now?
            delivery_time:
                description: Delivery time in days
                type: number
                examples:
                    - 3

            # fabric - should be a tag right?
            # designer - should be a tag right?
            # size - should be a tag right?

            # stock:
            #     type: array
            #     items:
            #         type: StockUnit

            categories:
                type: array
                minItems: 0
                items:
                    type: Tag
                    examples:
                        - "Clothing"
            tags:
                type: array
                minItems: 0
                items:
                    type: Tag
                    examples:
                        - "Cotton"

    # -----------------------------
    #   Brand
    # --------------------------

    Brand:
        description: |
            A product brand.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Brand"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
                examples:
                    - "Joy Mitra"
            tags:
                type: array
                minItems: 0
                items:
                    type: Tag
                    examples:
                        - "Cotton"

    # -----------------------------
    #   Brand
    # --------------------------

    Category:
        description: |
            A product category.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Category"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            # not sure:

            name:
                type: string
                examples:
                    - "Clothing"
            subcategories:
                type: array
                minItems: 0
                items:
                    type: Category
                    examples:
                        - "Dresses"

    # -----------------------------
    #   Tag
    # --------------------------

    Tag:
        description: |
            A product/content category.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Tag"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
                examples:
                    - "Fabric"

            # not sure:

            subtags:
                type: array
                minItems: 0
                items:
                    type: Tag
                    examples:
                        - "Cotton"

    # -----------------------------
    #   Page
    # --------------------------

    # DISCUSS - can be modeled using `Post` (depends)


    # -----------------------------
    #   Post
    # --------------------------

    Post:
        description: |
            A content/post.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Post"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
            description:
                type: string
            body:
                type: string # proposal: markdown
            tags:
                type: array
                minItems: 0
                items:
                    type: Tag


    # -----------------------------
    #   Media
    # --------------------------

    Media:
        description: |
            A content post.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Media"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            url:
                type: string
                format: url
            content_type:
                type: string
            width:
                type: number
            height:
                type: number
            aspect_ratio:
                type: number
            pixel_ratio:
                type: number
            tags:
                type: array
                minItems: 0
                items:
                    type: Tag

            # not sure:
            quality:
                enum: ["low", "high"] # just an example (maybe utilize with tags?)

            format:
                enum: ["tablet", "mobile", "desktop"] # just an example (maybe utilize with tags?)


    # -----------------------------
    #   Inquiry
    # --------------------------

    # NOTE: No data schema right now to keep simple, any data defined by API request will be posted. In future spec as "Form" with schema maybe.

    Inquiry:
        description: |
            A(n) user/visitor/customer inquiry.
        type: object
        required:
            - type
            - id
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Inquiry"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            key:
                type: string
            value:
                type: object
                examples:
                    - {"email": "camilla.belle@example.com", "name": "Camilla Belle", "newsletter": true}


    # -----------------------------
    #   Error
    # --------------------------

    Meta:
        description: |
            A meta data key-value.
        type: object
        required:
            - type
            - id
            - name
            - content
            - created_at
            - updated_at
        properties:
            type:
                enum: ["Inquiry"]
            id:
                type: string
            created_at:
                type: dateTime
            updated_at:
                type: dateTime

            name:
                type: string
            content:
                type: string


    # -----------------------------
    #   Error
    # --------------------------

    Error:
        description: |
            A system error.
        type: object
        required:
            - type
            - id
            - message
        properties:
            type:
                enum: ["Error"]
            id:
                description: |
                    Error ID/code.
                type: string
                examples:
                    - 400
            message:
                description: |
                    Name of the place.
                type: string
                examples:
                    - "Something went wrong."
                    - "Invalid parameter(s): :query. Expected `Number` got `String`."

# -----------------------------
#   API Endpoints
# --------------------------

paths:

    # -----------------------------
    #   System
    # --------------------------

    /_alive:
        # GET /_alive?
        get:
            description: |
                Service alive?
            responses:
                200:
                    description: OK
                    schema:
                        type: object
                        properties:
                            status:
                                description: |
                                    Returns if service is alive or not.
                                type: boolean
                default:
                    description: Unknown
                    schema:
                        $ref: '#/definitions/Error'


    # -----------------------------
    #   Store
    # --------------------------


    /customer:
        # GET /customer
        get:
            description: |
                GET current customer (settings)

        # POST /customer
        post:
            description: |
                POST (create) a new customer account

        # PUT /customer
        put:
            description: |
                PUT (update) current customer account (settings)

        # DELETE /customer
        delete:
            description: |
                DELETE an existing customer account

        # POST /customer/reset
        /reset:
            post:
                description: |
                    POST request customer password reset (email recovery)

        /session:
            # GET /customer/session
            get:
                description: |
                    GET current customer session (logged in?)

            # POST /customer/session
            post:
                description: |
                    POST create customer session (login)

            # DELETE /customer/session
            delete:
                description: |
                    DELETE current customer session (logout)

        /cart:
            # GET /customer/cart
            get:
                description: |
                    GET current user's (active) shopping cart

            # PUT /customer/cart
            put:
                description: |
                    PUT (update) current cart (i.e. product items)

        /orders:
            # GET /customer/orders
            get:
                description: |
                    GET current user's (past / processing) orders

        /subscriptions:
            # GET /customer/subscriptions
            get:
                description: |
                    GET current user's subscriptions (active)

            # DISCUSS/REVIEW:

            # PUT /customer/subscriptions
            # put:
            #     description: |
            #         PUT update current user's (active) subscription(s) (active)

            # DELETE /customer/subscriptions
            delete:
                description: |
                    DELETE current user's (active) subscription(s)

        /wishlists:

            # GET /customer/wishlists
            get:
                description: |
                    GET current user's (product) wishlist(s)

            # POST /customer/wishlists
            post:
                description: |
                    POST create current user's (product) wishlist(s)

            # PUT /customer/wishlists
            put:
                description: |
                    PUT create current user's (product) wishlist(s)

            # DELETE /customer/wishlists
            delete:
                description: |
                    DELETE current user's (product) wishlist(s)

        /pins:
            # GET /customer/pins
            get:
                description: |
                    GET current user's (product/content) pins(s)

            # POST /customer/pins
            post:
                description: |
                    POST create current user's (product/content) pins(s)

            # PUT /customer/pins
            put:
                description: |
                    PUT create current user's (product/content) pins(s)

            # DELETE /customer/pins
            delete:
                description: |
                    DELETE current user's (product/content) pins(s)


    # GET /store
    /store:
        get:
            description: |
                GET current store

        # GET /store/brands
        # GET /store/brands?name=Ni
        # GET /store/brands?tags=fabric,cotton
        /brands:
            get:
                description: |
                    GET brands

        # GET /store/products
        # GET /store/products?name=Blu
        # GET /store/products?brand=Nike
        # GET /store/products?tags=fabric,cotton
        # GET /store/products?color=red
        /products:
            get:
                description: |
                    GET products

        # GET /store/categories
        # GET /store/categories?name=Blu
        /categories:
            get:
                description: |
                    GET categories

        # GET /store/tags
        # GET /store/tags?tag=fabric
        /tags:
            get:
                description: |
                    GET tags

        # GET /store/posts
        # GET /store/posts?tags=landingpage
        /posts:
            get:
                description: |
                    GET posts

